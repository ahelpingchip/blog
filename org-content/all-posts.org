#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t

#+seq_todo: TODO DRAFT DONE

#+property: header-args :eval never-export

#+author: Levi Tan Ong

* DRAFT Expense Logging with Ledger Mode and Airtable
:PROPERTIES:
:EXPORT_FILE_NAME: expense-logging-with-ledger-mode-and-airtable
:EXPORT_DATE: 2019-3-31
:END:
** Summary

Many companies and organizations subsidize certain things like transit, food,
and lodging for their employees, with the requirement that the latter log these
expenses in some financial accounting software. (In my case, it is
[[https://airtable.com][Airtable]].) Despite the obvious tedium, it is useful to
record this data on one's personal [[https://www.ledger-cli.org/][Ledger]]
journal for more complete data. [fn:completeData] Luckily, emacs is highly
scriptable, and provides us with a lot of tools to make our lives easier. This
article details my efforts in building a system for posting expenses from a
Ledger file onto Airtable .

** Ledger Data

Consider a typical ledger transaction:

#+NAME: Gas Receipt
#+BEGIN_SRC ledger :results silent :exports none :cmdline -s bal
2019/03/29 Richard Stallman's Gas Station
    expenses:transport:fuel                     2000 PHP
    expenses:food                                200 PHP
    assets:cash                                -2200 PHP
#+END_SRC

Let's rummage through the ledger
[[https://github.com/ledger/ledger-mode][source]] to see if we can find a good
starting point. It turns out that
[[https://github.com/ledger/ledger-mode/blob/c59bbfcc3274d113dec68121786546979f33dad0/ledger-xact.el#L65][ledger-xact-payee]]
exists. Since ~ledger-xact-payee~ uses ~point~, and I want to evaluate things
using ~org-babel-execute-src-block~, we'll have to take an excusion to position
~1287~ (yes, I found the point of some character inside that posting above)
before invoking ~ledger-xact-payee~.

#+begin_src emacs-lisp :exports both
(save-excursion
  (goto-char 1287)
  (ledger-xact-payee))
#+end_src

#+RESULTS:
: Richard Stallman's Gas Station

Great, it works as advertized. We also want to figure out the date and the
amount, so let's see how ~ledger-xact-payee~ found the payee.

#+begin_src emacs-lisp
(defun ledger-xact-payee ()
  "Return the payee of the transaction containing point or nil."
  (let ((i 0))
    (while (eq (ledger-context-line-type (ledger-context-other-line i)) 'acct-transaction)
      (setq i (- i 1)))
    (let ((context-info (ledger-context-other-line i)))
      (if (eq (ledger-context-line-type context-info) 'xact)
          (ledger-context-field-value context-info 'payee)
        nil))))
#+end_src

** Footnotes
[fn:completeData] For instance, you might not work in the same company forever,
but still maintain your spending habits. Just because you aren't spending money
doesn't mean you aren't /spending/.


* TODO Github READMEs in Org Mode
:PROPERTIES:
:EXPORT_FILE_NAME: github-readmes-in-org-mode
:EXPORT_DATE: 2019-3-31
:END:
** clojars image links
https://github.com/wallyqs/org-ruby/issues/42
** code block evaluation
*** results being funky
https://orgmode.org/manual/results.html
*** multiline headers for readability
https://orgmode.org/manual/Using-Header-Arguments.html
*** results not showing on github
https://github.com/wallyqs/org-ruby/issues/62
* TODO Fish et al
:PROPERTIES:
:EXPORT_FILE_NAME: fish-et-al
:EXPORT_DATE: 2019-3-31
:END:
** clojars and credentials
** git crypt

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
