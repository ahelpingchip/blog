#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t

#+seq_todo: TODO DRAFT DONE

#+property: header-args :eval never-export

#+author: Levi Tan Ong

* DRAFT Airtable Expense Logging with Ledger Mode
:PROPERTIES:
:EXPORT_FILE_NAME: expense-logging-with-ledger-mode-and-airtable
:EXPORT_DATE: 2019-3-31
:END:
** Summary

Many companies and organizations subsidize certain things like transit, food,
and lodging for their employees, with the requirement that the latter log these
expenses via some system defined by the Powers That Be. My company uses
[[https://airtable.com][Airtable]]. [fn:airtable]

If you use [[https://www.ledger-cli.org/][Ledger]] to maintain your personal accounting, it can and will be
tedious to log your subsidized/reimbursable expenses on both Ledger /and/
Airtable. Even if you can say that it isn't really your money being spent, if
it's a personal expense being subsidized, it's still part of your lifestyle, and
there is no guarantee you'll be working in the same place or have the same
benefits forever. This data is valuable to you, and you should keep track of it.

Luckily for us, Airtable has an API. This article details my efforts in building
a set of emacs functions for posting expenses from a Ledger file onto Airtable.
Because I want this article to be as accessible and as informative as possible,
I will go through the derivation of this script including exploring
ledger-mode's implementation.

** Ledger Data

*** A typical receipt
Consider a typical ledger transaction:

#+NAME: Gas Receipt
#+BEGIN_SRC ledger :results silent
2019/03/29 Richard Stallman's Gas Station
    expenses:transport:fuel                     2000 PHP
    expenses:food                                200 PHP
    assets:cash                                -2200 PHP
#+END_SRC

*** Definition of Terms

Ledger's terminology may be a little confusing, so let's clarify them.

| Term        | What it means                                                                                                                                                                                               | Example                        |
|-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------|
| transaction | A line item detailing a change in the amount stored in an account                                                                                                                                           | expenses:food   2200 PHP       |
| xact        | A group of transactions tied by a date and some description, usually just the payee. What a lot of peple, myself included, would intuitively think of as the "transaction". I sometimes call this an entry. | The whole thing above          |
| payee       | A contextualizing description of the xact. Usually a person or entity like John, or McDonald's                                                                                                              | Richard Stallman's Gas Station |
| account     | An account as described in double entry bookkeeping                                                                                                                                                         | expenses:food                  |
| amount      | The amount by which an account's balance changes. Because we're sensible programmers, we just use positive and negative values rather than superfluous terms like "debit" and "credit".                     | -2200 PHP                      |

*** The Payee

Let's rummage through the ledger [[https://github.com/ledger/ledger-mode][source]] to see if we can find a good starting
point. It turns out that [[https://github.com/ledger/ledger-mode/blob/c59bbfcc3274d113dec68121786546979f33dad0/ledger-xact.el#L65][ledger-xact-payee]] exists. Since ~ledger-xact-payee~
uses ~point~, and I want to evaluate things using ~org-babel-execute-src-block~,
we'll have to take an excusion to position ~1287~ (yes, I found the point of
some character inside that posting above) before invoking ~ledger-xact-payee~.

#+begin_src emacs-lisp :exports both
(save-excursion
  (goto-char 1586)
  (ledger-xact-payee))
#+end_src

#+RESULTS:
: Richard Stallman's Gas Station

Great, it works as advertized. We also want to figure out the date and the
amount, so let's see how ~ledger-xact-payee~ found the payee.

#+begin_src emacs-lisp :exports code :results silent
(defun ledger-xact-payee ()
  "Return the payee of the transaction containing point or nil."
  (let ((i 0)) ;; (1)
    (while (eq (ledger-context-line-type
                (ledger-context-other-line i))
               'acct-transaction)
      (setq i (- i 1))) ;; (2)
    (let ((context-info (ledger-context-other-line i)))
      (if (eq (ledger-context-line-type context-info) 'xact) ;; (3)
          (ledger-context-field-value context-info 'payee) ;; (4)
        nil))))
#+end_src

So it looks like:
1. We start from point
2. Move up a line if we're in an account transaction
3. If the line is the ~xact~
4. Return the ~payee~

*** The Date

Simple enough. Unfortunately, I haven't found anything like ~ledger-xact-date~,
so we'll have to build our own. Since the implementation would be too similar to
~ledger-xact-payee~, I think it would be worth refactoring ~ledger-xact-payee~
into something more general and composable.

#+begin_src emacs-lisp :results silent
(defun ledger-xact-context
  "Return the context of the transaction containing point or nil."
  (let ((i 0))
    (while (eq (ledger-context-line-type
                (ledger-context-other-line i))
               'acct-transaction)
      (setq i (- i 1)))
    (let ((context-info (ledger-context-other-line i)))
      (if (eq (ledger-context-line-type context-info) 'xact)
          context-info
        nil))))

(defun ledger-xact-payee ()
  "Return the payee of the transaction containing point or nil."
  (let ((xact-context (ledger-xact-context)))
    (if xact-context
        (ledger-context-field-value xact-context 'payee)
      nil)))
#+end_src

This way, we can just use ~ledger-context-field-value~ to get the date or payee.

#+begin_src emacs-lisp :exports both :results code
(save-excursion
  (goto-char 1601)
  (let ((xact-context (ledger-xact-context)))
    (list (ledger-context-field-value xact-context 'date)
          (ledger-context-field-value xact-context 'payee))))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
("2019/03/29" "Richard Stallman's Gas Station")
#+end_src

*** The Amount

As for the amount, there are at least two, and because ledger entries can get
more complicated than this, we can't just assume the simplest case. Instead, we
can just /not/ assume! We will let the user specify it for us. We can just use
~(ledger-context-other-line 0)~ which, if you look at the source, is really just
~(ledger-context-at-point)~.

#+begin_src emacs-lisp :exports both :results code
(save-excursion
  (goto-char 1775)
  (let ((point-context (ledger-context-at-point)))
    (ledger-context-field-value point-context 'commoditized-amount))
  )
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
"-2200 PHP"
#+end_src

Let's look at another transaction.

#+begin_src emacs-lisp :exports both :results code
(save-excursion
  (goto-char 1715)
  (let ((point-context (ledger-context-at-point)))
    (ledger-context-field-value point-context 'commoditized-amount)))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
"200 PHP"
#+end_src

*** Convenience

We now have everything we need to create a function that can return all the data
we need in a convenient form.

#+begin_src emacs-lisp :exports both :results code
(defun airtable--expense-data ()
  "Return transaction data for submitting an expense report."
  (let ((xact-context (ledger-xact-context))
        (point-context (ledger-context-at-point)))
    (if (and xact-context
             (eq (ledger-context-line-type point-context) 'acct-transaction)
             (ledger-context-field-present-p point-context
                                             'commoditized-amount))
        (let ((tx-data (list))
              (date (ledger-context-field-value xact-context
                                                'date))
              (payee (ledger-context-field-value xact-context
                                                 'payee))
              (amount (ledger-context-field-value point-context
                                                  'commoditized-amount)))
          (map-put tx-data 'date date)
          (map-put tx-data 'payee payee)
          (map-put tx-data 'amount amount)
          tx-data)
      nil)))

(save-excursion
  (goto-char 1775)
  (airtable--expense-data)
  )
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
((amount . "-2200 PHP")
 (payee . "Richard Stallman's Gas Station")
 (date . "2019/03/29"))
#+end_src

Now we have a nice, convenient associative data structure containing everything
we need for the next part.


** Airtable

*** Setup

This section is tricky, because this involves secrets: the "project id" included
in the URL, and the API key. Mine are... just kidding. Let's load the encrypted
secrets.

#+begin_src emacs-lisp :exports code :results silent
(load-file "../secrets/airtable-secrets.el")
(require 'airtable-secrets)
#+end_src

We'll need the excellent [[https://github.com/tkf/emacs-request][emacs-request]] library.

#+begin_src emacs-lisp :results silent
(use-package request :ensure t)
#+end_src

Each Airtable *base* has its own tables and schema, so it will be up you to
figure out the right table to interact with, and exact fields to use in the JSON
payload. Let's created a blank airtable base from the [[https://airtable.com/templates/hr-and-recruiting/expAJmFL8SkCqfjnj/expense-tracking][expense tracking template]].
We can figure out the api for this particular base by going to
https://airtable.com/api and selecting the base we just made.

*** Experimentation

I'm wary about running POST requests right off the bat without being sure about
our requests. We'll use ~request.el~ for our http needs. Let's try to get the
list of receipts, and since we're only doing this for confirmation, we can set
(1) ~maxRecords~ to 1. We need to make the request synchronous (2) so that org
mode can capture the returned value.

#+begin_src emacs-lisp :async :exports both :results value code
(request-response-data
 (request airtable-secrets-url
          :type "GET"
          :params '(("maxRecords" . 1) ;; (1)
                    ("view" . "Main View"))
          :sync t ;; (2)
          :parser 'json-read
          :headers `(("Content-Type" . "application/json")
                     ("Authorization" . ,(format "Bearer %s" airtable-secrets-auth-token)))))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
((records .
          [((id . "recvM8nBwdDtki4vo")
            (fields
             (Receipt\ Photo .
                             [((id . "attRl2O8I67NQBQXo")
                               (url . "https://dl.airtable.com/0cWfA9hiTOWP5QfdUNij_cactuscastle.jpg")
                               (filename . "cactuscastle.jpg")
                               (size . 16064)
                               (type . "image/jpeg")
                               (thumbnails
                                (small
                                 (url . "https://dl.airtable.com/MBqpodIaQJWI62Q5t1iq_cactuscastle.jpg")
                                 (width . 48)
                                 (height . 36))
                                (large
                                 (url . "https://dl.airtable.com/WQVXLIuiQTGYIgDoAIxY_cactuscastle.jpg")
                                 (width . 256)
                                 (height . 191))))])
             (Category . "Interior Decor")
             (Short\ Description . "Cactus")
             (Total . 11.5)
             (Date\ &\ Time . "2015-11-06T14:22:00.000Z")
             (Notes . "A cute blue cactus with golden spines, will go great in the dining room.")
             (Who\ Paid\? . "Maritza"))
            (createdTime . "2015-08-03T23:10:03.000Z"))]))
#+end_src

Great, we got a response! Now let's try to POST a new entry. We're setting the
payor as "Quinns" because that's one of two values allowed by the template.

#+begin_src emacs-lisp :async :exports both :results value code
(request-response-data
 (request airtable-secrets-url
          :type "POST"
          :sync t
          :parser 'json-read
          :data (json-encode `(("fields" . (("Short Description" . "Testing")
                                            ("Who Paid?" . "Quinns") ;; (1)
                                            ("Date & Time" . "2019-04-09T14:22:00.000Z")
                                            ("Total" . 10)
                                            ))))
          :headers `(("Content-Type" . "application/json")
                     ("Authorization" . ,(format "Bearer %s" airtable-secrets-auth-token)))
          ))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
((id . "recFyrCYKAAwjELUr")
 (fields
  (Short\ Description . "Testing")
  (Total . 10)
  (Date\ &\ Time . "2019-04-09T14:22:00.000Z")
  (Who\ Paid\? . "Quinns"))
 (createdTime . "2019-04-09T11:25:12.000Z"))
#+end_src

We can now create a command to post expenses!

#+begin_src emacs-lisp :async :exports both :results output
(defun airtable--post-expense ()
  "derp"
  (interactive)
  (let* ((xact-data (airtable--expense-data))
         (xact-date (cdr (assoc 'date xact-data)))
         (xact-amount (cdr (assoc 'amount xact-data)))
         (xact-payee (cdr (assoc 'payee xact-data)))
         (amount (abs (string-to-number (car (split-string xact-amount)))))
         (date (format "%sT12:00:00.000Z"
                       (replace-regexp-in-string (regexp-quote "/") "-" xact-date)))
         )
    (request airtable-secrets-url
             :type "POST"
             :sync t
             :parser 'json-read
             :data (json-encode `(("fields" . (("Short Description" . ,xact-payee)
                                               ("Who Paid?" . "Quinns")
                                               ("Date & Time" . ,date)
                                               ("Total" . ,amount)
                                               ))))
             :headers `(("Content-Type" . "application/json")
                        ("Authorization" . ,(format "Bearer %s" airtable-secrets-auth-token)))
             :success (cl-function
                       (lambda (&key data &allow-other-keys)
                         (print "Expense Posted!")))
             :error (cl-function
                     (lambda (&key error-thrown &allow-other-keys)
                       (print error-thrown))))))

(save-excursion
  (goto-char 1775)
  (airtable--post-expense)
  )
#+end_src

#+RESULTS:
:
: "Expense Posted!"

A quick trip to the base tells me that indeed, the entry has been posted. Now
all I have to do is take a picture, and the Airtable mobile app makes that easy.

** Footnotes
[fn:airtable] My company also uses Airtable for other administrative tasks like
tracking leaves of absence and many other things. We've mostly switched over to
[[https://www.notion.so][Notion]] because it performs better as a knowledge base, but unfortnately Notion
doesn't have an API.



* TODO Github READMEs in Org Mode
:PROPERTIES:
:EXPORT_FILE_NAME: github-readmes-in-org-mode
:EXPORT_DATE: 2019-3-31
:END:
** clojars image links
https://github.com/wallyqs/org-ruby/issues/42
** code block evaluation
*** results being funky
https://orgmode.org/manual/results.html
*** multiline headers for readability
https://orgmode.org/manual/Using-Header-Arguments.html
*** results not showing on github
https://github.com/wallyqs/org-ruby/issues/62
* TODO Fish et al
:PROPERTIES:
:EXPORT_FILE_NAME: fish-et-al
:EXPORT_DATE: 2019-3-31
:END:
** clojars and credentials
** git crypt

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
