#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t

#+seq_todo: TODO DRAFT DONE

#+property: header-args :eval never-export

#+author: Levi Tan Ong

* DRAFT Expense Logging with Ledger Mode and Airtable
:PROPERTIES:
:EXPORT_FILE_NAME: expense-logging-with-ledger-mode-and-airtable
:EXPORT_DATE: 2019-3-31
:END:
** Summary

Many companies and organizations subsidize certain things like transit, food,
and lodging for their employees, with the requirement that the latter log these
expenses in some financial accounting software. (In my case, it is [[https://airtable.com][Airtable]].)
Despite the obvious tedium, it is useful to record this data on one's personal
[[https://www.ledger-cli.org/][Ledger]] journal for more complete data. [fn:completeData] Luckily, emacs is
highly scriptable, and provides us with a lot of tools to make our lives easier.
This article details my efforts and thought process in building a system for
posting expenses from a Ledger file onto Airtable. Because it follows my thought
and learning process, it may feel a bit hand-holdy and tend towards
over-explaining. I want this article to be as accessible as possible, so please
bear with me.

** Ledger Data

Consider a typical ledger transaction:

#+NAME: Gas Receipt
#+BEGIN_SRC ledger :results silent
2019/03/29 Richard Stallman's Gas Station
    expenses:transport:fuel                     2000 PHP
    expenses:food                                200 PHP
    assets:cash                                -2200 PHP
#+END_SRC

*** Definition of Terms

Ledger's terminology may be a little confusing, so let's clarify them.

| Term        | What it means                                                                                                                                                                                               | Example                        |
|-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------|
| transaction | A line item detailing a change in the amount stored in an account                                                                                                                                           | expenses:food   2200 PHP       |
| xact        | A group of transactions tied by a date and some description, usually just the payee. What a lot of peple, myself included, would intuitively think of as the "transaction". I sometimes call this an entry. | The whole thing above          |
| payee       | A contextualizing description of the xact. Usually a person or entity like John, or McDonald's                                                                                                              | Richard Stallman's Gas Station |
| account     | An account as described in double entry bookkeeping                                                                                                                                                         | expenses:food                  |
| amount      | The amount by which an account's balance changes. Because we're sensible programmers, we just use positive and negative values rather than superfluous terms like "debit" and "credit".                     | -2200 PHP                      |

*** Exploration

Let's rummage through the ledger [[https://github.com/ledger/ledger-mode][source]] to see if we can find a good starting
point. It turns out that [[https://github.com/ledger/ledger-mode/blob/c59bbfcc3274d113dec68121786546979f33dad0/ledger-xact.el#L65][ledger-xact-payee]] exists. Since ~ledger-xact-payee~
uses ~point~, and I want to evaluate things using ~org-babel-execute-src-block~,
we'll have to take an excusion to position ~1287~ (yes, I found the point of
some character inside that posting above) before invoking ~ledger-xact-payee~.

#+begin_src emacs-lisp :exports both
(save-excursion
  (goto-char 1287)
  (ledger-xact-payee))
#+end_src

#+RESULTS:
: Richard Stallman's Gas Station

Great, it works as advertized. We also want to figure out the date and the
amount, so let's see how ~ledger-xact-payee~ found the payee.

#+begin_src emacs-lisp
(defun ledger-xact-payee ()
  "Return the payee of the transaction containing point or nil."
  (let ((i 0)) ;; (1)
    (while (eq (ledger-context-line-type (ledger-context-other-line i)) 'acct-transaction)
      (setq i (- i 1))) ;; (2)
    (let ((context-info (ledger-context-other-line i)))
      (if (eq (ledger-context-line-type context-info) 'xact) ;; (3)
          (ledger-context-field-value context-info 'payee) ;; (4)
        nil))))
#+end_src

So it looks like:
1. We start from point
2. Move up a line if we're in an account transaction
3. If the line is the ~xact~
4. Return the ~payee~

Simple enough. Unfortunately, I haven't found anything like ~ledger-xact-date~,
so we'll have to build our own. Since the implementation would be too similar to
~ledger-xact-payee~, I think it would be worth refactoring ~ledger-xact-payee~
into something more general and composable.

#+begin_src emacs-lisp
(defun ledger-xact-context ()
  "Return the context of the transaction containing point or nil."
  (let ((i 0))
    (while (eq (ledger-context-line-type (ledger-context-other-line i)) 'acct-transaction)
      (setq i (- i 1)))
    (let ((context-info (ledger-context-other-line i)))
      (if (eq (ledger-context-line-type context-info) 'xact)
          context-info
        nil))))

(defun ledger-xact-payee ()
  "Return the payee of the transaction containing point or nil."
  (let ((xact-context (ledger-xact-context)))
    (if xact-context
        (ledger-context-field-value xact-context 'payee)
      nil)))
#+end_src

This way, we can just use ~ledger-context-field-value~ to get the date or payee.

#+begin_src emacs-lisp :exports both :results pp
(save-excursion
  (goto-char 1287)
  (let ((xact-context (ledger-xact-context)))
    (list (ledger-context-field-value xact-context 'date)
          (ledger-context-field-value xact-context 'payee))))
#+end_src

#+RESULTS:
: ("2019/03/29" "Richard Stallman's Gas Station")

As for the amount, there are at least two, and because ledger entries can get
more complicated than this, we can't just assume the simplest case. Instead, we
can just /not/ assume! We will let the user specify it for us. We can just use
~(ledger-context-other-line 0)~ which, if you look at the source, is really just
~(ledger-context-at-point)~.

#+begin_src emacs-lisp :exports both :results pp
(save-excursion
  (goto-char 1489)
  (let ((point-context (ledger-context-at-point)))
    (ledger-context-field-value point-context 'commoditized-amount))
  )
#+end_src

#+RESULTS:
: "-2200 PHP"

Let's look at another transaction.

#+begin_src emacs-lisp
(save-excursion
  (goto-char 1433)
  (let ((point-context (ledger-context-at-point)))
    (ledger-context-field-value point-context 'commoditized-amount)))
#+end_src

#+RESULTS:
: 200 PHP

We now have everything we need to create a function that can return all the data
we need in a convenient form.

#+begin_src emacs-lisp

#+end_src

** Footnotes
[fn:completeData] For instance, you might not work in the same company forever,
but still maintain your spending habits. Just because you aren't spending money
doesn't mean you aren't /spending/.


* TODO Github READMEs in Org Mode
:PROPERTIES:
:EXPORT_FILE_NAME: github-readmes-in-org-mode
:EXPORT_DATE: 2019-3-31
:END:
** clojars image links
https://github.com/wallyqs/org-ruby/issues/42
** code block evaluation
*** results being funky
https://orgmode.org/manual/results.html
*** multiline headers for readability
https://orgmode.org/manual/Using-Header-Arguments.html
*** results not showing on github
https://github.com/wallyqs/org-ruby/issues/62
* TODO Fish et al
:PROPERTIES:
:EXPORT_FILE_NAME: fish-et-al
:EXPORT_DATE: 2019-3-31
:END:
** clojars and credentials
** git crypt

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
